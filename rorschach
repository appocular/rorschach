#!/usr/bin/env php
<?php

use Facebook\WebDriver\Remote\RemoteWebDriver;
use Facebook\WebDriver\Remote\WebDriverCapabilityType;
use Facebook\WebDriver\WebDriver;
use GuzzleHttp\Client;
use Psr\Container\ContainerInterface as Container;
use Rorschach\CheckpointFetcher;
use Rorschach\CheckpointProcessor;
use Rorschach\Config;
use Rorschach\Fetchers\ReadInFetcher;
use Rorschach\Fetchers\StitcherFetcher;
use Rorschach\Helpers\Env;
use Rorschach\Helpers\Output;
use Rorschach\Helpers\WorkerFactory;
use Rorschach\Multiplexer;
use Rorschach\Processors\AppocularProcessor;
use Rorschach\Processors\WriteOutProcessor;
use Rorschach\Snapshot;
use Rorschach\Worker;
use Symfony\Component\Console\Input\InputInterface;
use Symfony\Component\Console\Output\OutputInterface;

require __DIR__ . '/vendor/autoload.php';

$app = new Silly\Edition\PhpDi\Application('Rorschach', '@git-version@');

$container = $app->getContainer();

$container->set(WebDriver::class, function (Config $config) {
    try {
        $capabilities = array(WebDriverCapabilityType::BROWSER_NAME => 'chrome');
        $webdriver = RemoteWebDriver::create($config->getWebdriverUrl(), $capabilities);
        return $webdriver;
    } catch (\Exception $e) {
        throw new \RuntimeException(sprintf('Could not connect to webdriver on "%s": %s', $config->getWebdriverUrl(), $e->getMessage()));
    }}
);

$container->set(Client::class, function (Config $config) {
    $base = $config->getBase();
    $scheme = 'https';
    if (preg_match('/docker$/', $base)) {
        $scheme = 'http';
    }
    return new Client(['base_uri' => $scheme . '://assessor.' . $config->getBase() . '/', 'timeout' => 60]);
});

$container->set(Output::class, function (OutputInterface $output) {
    return new Output($output);
});

$container->set(Worker::class, function (CheckpointFetcher $fetcher, CheckpointProcessor $processor, Output $output) {
    return new Worker(
        $fetcher,
        $processor,
        $output,
        file_get_contents(
            'php://stdin'
        )
    );
});

$container->set(WorkerFactory::class, function () use ($argv) {
    return new WorkerFactory($argv);
});

$container->set(Multiplexer::class, function (
    Config $config,
    Output $output,
    WorkerFactory $workerFactory,
    CheckpointProcessor $processor
) {
    return new Multiplexer(
        $config,
        $output,
        $workerFactory,
        $processor
    );
});

$container->set(CheckpointProcessor::class, function (Container $container, Config $config) {
    if ($config->getWriteOut()) {
        return $container->make(WriteOutProcessor::class);
    } else {
        return $container->make(AppocularProcessor::class);
    }
});

$container->set(CheckpointFetcher::class, function (Container $container, Config $config) {
    if ($config->getReadIn()) {
        return $container->make(ReadInFetcher::class);
    } else {
        return $container->make(StitcherFetcher::class);
    }
});

$app->command('run [--webdriver=] [--base-url=] [--write-out=] [--read-in=] [--base=] [--worker]', function (Container $container, InputInterface $input, OutputInterface $output) {
    $container->set(InputInterface::class, $input);
    $container->set(OutputInterface::class, $output);

    if ($input->getOption('worker')) {
        // Start worker.
        return $container->make(Worker::class)->run() ? 0 : 1;
    }
    else {
        // Do the snapshot.
        return $container->make(Multiplexer::class)->run() ? 0 : 1;
    }
});
$app->setDefaultCommand('run', true);

$app->run();
